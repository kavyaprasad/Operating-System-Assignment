1. The synchronization is achieved using wait and signal methods. Two semaphores 'produced' and 'consumed' are created, and set to 0 and 1 respectively. The consumer cannot start execution until it receives the 'produced' signal generated by the producer. The producer, starts executing since the consumed semaphore initial value is set to 1. It increments the count and the signals the produced semaphore so that the consumer can resume. The consumer then consumes the n variable and signals the consumed signal so    that producer can start again. In this way by using wait and signal on critical section we are able to achieve synchronization. 

2.  No, using one semaphore we cannot achieve synchronization. As a single semaphore cannot be used to lock the critical section, and the two processes will be preempted and we don't get the desired output.

Our code has 3 functions;
 
1. The main function first checks the number of arguments,sets the default count value as 2000,if there arent any commandline arguments. If any valid integer is given as a commandline argument it updates the count value to that of the integer.It now creates two semaphores 'produced' and 'consumed'. It then  creates processes producer and consumer using the XINU system call create. It alternatively suspends and resumes both the processes based on the semaphore wait signals until they terminate. 
 
2. The producer function waits on the consumed signal and then increments the n value starting from 1 and stores the value in the global variable n. It then gives the produced signal.

3. The consumer function waits on the produced signal, then acceses the global variable n and displays it. It then gives the consumed signal.

Our Team consist of :
Our Team consist of :
1. Shweta Bhartia (sbhartia)
2. Kavya guruprasad (prasadk)
 
We both created and debugged the code together working equally.


sbhartia was responsible for creating the producer.c and consumer.c .

prasadk was responsible for creating the prodcons.c.